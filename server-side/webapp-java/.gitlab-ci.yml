#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

# The following article has been taken as example to build this file:
# https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-ci-cd-on-ubuntu-18-04#step-4-setting-up-an-ssh-key

# NECESSARY ENVIRONMENT VARIABLES
# - SERVER_IP : the IP of the server where the product is going to be deployed
# - SERVER_USER : the user of the server where the product is going to be deployed
# - SSH_PRIVATE_KEY : follow the instructions in the article cited before to know what insert here

stages:          # List of stages for jobs, and their order of execution
  - deploy
  - log

before_script:
  - sed -i 's/stable\/updates/stable-security\/updates/' /etc/apt/sources.list
  - apt update
  - apt install git -y

delpoy_prod:
  stage: deploy
  environment:
    name: production
    on_stop: stop_prod
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    # 0 - stop server container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop wasm-server-side-server || echo Server Container has not been initialized yet"
    # 1 - stop client container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop wasm-server-side-client || echo Client Container has not been initialized yet"
    # 2 - stop flask container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop wasm-server-side-flask || echo Flask Container has not been initialized yet"
    # 3 stop nginx container
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop wasm-server-side-nginx || echo Nginx Container has not been initialized yet"
    # 4 - move to root folder and pull changes from main
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments/wasm/server-side/webapp && git checkout -- . && git checkout main && git pull && git reset --hard $CI_COMMIT_SHA"
    # 5 - move to each city folder and execute docker compose
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /opt/ci/deployments/wasm/server-side/webapp/deploy && docker compose up -d --build server client postgres nginx"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TASK_NAME == "night-deploy"'
      when: always
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - when: never
    
stop_prod:
  stage: deploy
  environment:
    name: production
    action: stop
  image: "kroniak/ssh-client"
  before_script: []
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop wasm-server-side-server wasm-server-side-client wasm-server-side-postgres wasm-server-side-nginx"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - when: never